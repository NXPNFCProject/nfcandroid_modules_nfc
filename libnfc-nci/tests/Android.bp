package {
    default_team: "trendy_team_fwk_nfc",
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "Android-Apache-2.0"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    default_applicable_licenses: ["Android-Apache-2.0"],
}

cc_test {
    name: "libnfc-nci-tests",
    include_dirs: [
        "packages/modules/Nfc/libnfc-nci/src/include",
        "packages/modules/Nfc/libnfc-nci/utils/include",
        "packages/modules/Nfc/libnfc-nci/src/nfc/include",
        "packages/modules/Nfc/libnfc-nci/src/gki/common",
        "packages/modules/Nfc/libnfc-nci/src/gki/ulinux",
        "packages/modules/Nfc/libnfc-nci/src/nfa/include",
        "packages/modules/Nfc/libnfc-nci/src/nfa/ce",
        "packages/modules/Nfc/libnfc-nci/src/nfa/dm",
    ],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    target: {
        host_linux: {
            cflags: ["-D_GNU_SOURCE"],
        },
        darwin: {
            enabled: false,
        },
    },
    sanitize: {
        integer_overflow: true,
        misc_undefined: ["bounds"],
        scs: true,
    },
    srcs: [
        "**/*.cc",
    ],
    static_libs: [
        "libgmock",
        "libnfc-nci",
        "libnfcutils",
        "android.hardware.nfc@1.0",
        "android.hardware.nfc@1.1",
        "android.hardware.nfc@1.2",
        // Add for AIDL
        "android.hardware.nfc-V2-ndk",
        "libnfc-nci_flags",
        "libstatslog_nfc",
    ],
    shared_libs: [
        "libcutils",
        "liblog",
        "libdl",
        "libz",
        "libbase",
        // Treble configuration
        "libhidlbase",
        "libutils",
        "libbinder_ndk",
        "libstatssocket",
        "server_configurable_flags",
        "libaconfig_storage_read_api_cc",
    ],
    test_suites: [
        "general-tests",
        "mts-nfc",
    ],
    test_config_template: "nfc_test_config_template.xml",
    // Support multilib variants (using different suffix per sub-architecture), which is needed on
    // build targets with secondary architectures, as the MTS test suite packaging logic flattens
    // all test artifacts into a single `testcases` directory.
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
        lib64: {
            suffix: "64",
        },
    },
    auto_gen_config: true,
    min_sdk_version: "current",
}
